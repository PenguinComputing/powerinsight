-- Describe the hardware
MainCarrier = "PN=10020355"
TempExpansion = "PN=10019889"
Exp1Expansion = nil
Exp2Expansion = nil
Exp3Expansion = nil

-- Describe the sensors
J[1] = { volts="v5",  amps="acs713" }
J[2] = { volts="v33", amps="acs713" }
J[3] = { volts="v12", amps="shunt10" }
T[1] = { temp="typeK" }
T[2] = { temp="typeK" }
T[3] = { temp="typeK" }
T[4] = { temp="typeK" }
T[5] = { temp="typeK" }
T[6] = { temp="typeK" }

-- Provide an Application
function App (...)
   local init, cnt = ...

   local i, m, k, v, j
   local ofc, fsc
   local t, cjt, cjtv
   local P = pi

   if init then
      P.spi1_0.bank:set(1)
      P.spi1_0:speed(2000000)
      ofc,fsc = P.ads1256_init( P.spi1_0.fd, 4000, 16 );
      io.write( string.format( "Calibration[1]: gain: %.9f offset: %.9f\n", fsc, ofc ));
      P.spi1_0.bank:set(0)
      P.spi1_0:speed(2000000)
      ofc,fsc = P.ads1256_init( P.spi1_0.fd, 1000, 16 );
      io.write( string.format( "Calibration[0]: gain: %.9f offset: %.9f\n", fsc, ofc ));
   else
      P.spi1_0.bank:set(0)
      P.spi1_0:speed(2000000)
      P.ads1256_setmux(P.spi1_0.fd, 0x68)
   end

   mode = P.spi_mode( P.spi1_0.fd )
   io.write( "SPI mode is: ", tostring( mode ), "\n" )

   local mux = { 0x01, 0x23, 0x45, 0x01 }

   t = P.ads1256_getraw_setmux( P.spi1_0.fd, 1/16, mux[1] );
   cjt = P.rt2temp_PTS(t, 27)
   cjtv = P.temp2volt_K(cjt)
   io.write( string.format( "Temperature T[cja] is: %6.3f [%.9f] => K-type offset: %.3f uV \n", cjt, t, cjtv*1000000 ));

   print( "Read and convert K-type after select channel w/globals" );
   start = P.gettime( )
   P.ads1256_setmux(P.spi1_0.fd, mux[1])
   for i = 1, 3 do
      t = P.ads1256_getraw_setmux(P.spi1_0.fd, 2.048/16, mux[i+1] )
      io.write( string.format( "Temperature T[%d] is: [%.9f] %6.3f\n", i, t, P.volt2temp_K(t+cjtv) ))
   end
   P.spi1_0.bank:set(1)
   P.ads1256_setmux(P.spi1_0.fd, 0x68)
   t = P.ads1256_getraw_setmux( P.spi1_0.fd, 1/16, mux[1] );
   cjt = P.rt2temp_PTS(t, 27)
   cjtv = P.temp2volt_K(cjt)
   io.write( string.format( "Temperature T[cjb] is: %6.3f [%.9f] => K-type offset: %.3f uV \n", cjt, t, cjtv*1000000 ));
   for i = 1, 3 do
      t = P.ads1256_getraw_setmux(P.spi1_0.fd, 2.048/16, mux[i+1] )
      io.write( string.format( "Temperature T[%d] is: [%.9f] %6.3f\n", i+3, t, P.volt2temp_K(t+cjtv) ))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, P.gettime(start) ))

end

-- ex: set sw=3 sta et : --
