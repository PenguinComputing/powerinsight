-- Describe the hardware
MainCarrier = "PN:10020335"
TempExpansion = "PN:10019889"
Exp1Expansion = nil
Exp2Expansion = nil
Exp3Expansion = nil

-- Describe the sensors
J[1] = { volts="v5",  amps="acs713" }
J[2] = { volts="v33", amps="acs713" }
J[3] = { volts="v12", amps="shunt10" }
T[1] = { temp="typeK" }
T[3] = { temp="typeK" }

-- Provide an Application
function App (...)
   local i, m, k, v, j
   local cnt = arg[1] or 99
   local ofc, fsc
   local t, cjt
   print( "arg= ", arg )
   print( "cnt= ", cnt )
   pi.spi1_0.bank:set(0)
   pi.spi1_0:maxspeed(1000000)
   ofc,fsc = pi.ads1256_init( pi.spi1_0.fd, 16 );
   io.write( string.format( "Calibration: gain: %.9f offset: %.9f\n", fsc, ofc ));
   t = pi.ads1256_getraw( pi.spi1_0.fd, 16 );
   cjt = pi.rt2temp_PTS(t, 27)
   io.write( string.format( "Temperature T[0]/cjt is: %6.3f [%.9f]\n", cjt, t ));
--[[
   for i = 1, cnt do
      pi.spi_message( pi.spi1_0, { tx_buf = "\16\10", delay_usecs = 10 }, { len = 11 } )
   end
]]--
   local all = { pi.spi_message( pi.spi1_0.fd, { tx_buf = "\16\10", delay_usecs = 10 }, { len = 11 } ) }
   for i,m in ipairs(all) do
      for k,v in pairs(m) do
         io.write( "[",i,"]",k," = " )
         if k == "tx_buf" or k == "rx_buf" then
            io.write( string.format( "%02x", v:byte(1) ) )
            for j = 2, #v do
               io.write( string.format( ":%02x", v:byte(j) ) )
            end
            io.write( "\n" )
         else
            io.write( tostring(v), "\n" )
         end
      end
   end

   for i = 1, 5 do
      local t = pi.ads1256_getraw(pi.spi1_0.fd, 16)
      io.write( string.format( "Temperature T[0] is: %6.3f [%.9f]\n", pi.rt2temp_PTS(t,27),t ))
   end

   pi.ads1256_setmux(pi.spi1_0.fd, 0x01)
   t = pi.ads1256_getraw(pi.spi1_0.fd, 16)
   io.write( string.format( "Temperature T[1] is: %6.3f [%.9f]\n", pi.volt2temp_K(t+pi.temp2volt(cjt)),t ))

   pi.ads1256_setmux(pi.spi1_0.fd, 0x23)
   t = pi.ads1256_getraw(pi.spi1_0.fd, 16)
   io.write( string.format( "Temperature T[2] is: %6.3f [%.9f]\n", pi.volt2temp_K(t+pi.temp2volt(cjt)),t ))

   pi.ads1256_setmux(pi.spi1_0.fd, 0x45)
   t = pi.ads1256_getraw(pi.spi1_0.fd, 16)
   io.write( string.format( "Temperature T[3] is: %6.3f [%.9f]\n", pi.volt2temp_K(t+pi.temp2volt(cjt)),t ))
end

-- ex: set sw=3 sta et : --
