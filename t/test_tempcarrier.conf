-- Describe the hardware
MainCarrier = "PN:10020355"
TempExpansion = "PN:10019889"
Exp1Expansion = nil
Exp2Expansion = nil
Exp3Expansion = nil

-- Describe the sensors
J[1] = { volts="v5",  amps="acs713" }
J[2] = { volts="v33", amps="acs713" }
J[3] = { volts="v12", amps="shunt10" }
T[1] = { temp="typeK" }
T[3] = { temp="typeK" }

-- Provide an Application
function App (...)
   local i, m, k, v, j
   local cnt = arg[1] or 99
   local ofc, fsc
   local t, cjt
   print( "arg= ", arg )
   print( "cnt= ", cnt )
   pi.spi1_0.bank:set(0)
   pi.spi1_0:speed(2000000)
   ofc,fsc = pi.ads1256_init( pi.spi1_0.fd, 2000, 16 );
   io.write( string.format( "Calibration: gain: %.9f offset: %.9f\n", fsc, ofc ));
   t = pi.ads1256_getraw( pi.spi1_0.fd, 1/16 );
   cjt = pi.rt2temp_PTS(t, 27)
   io.write( string.format( "Temperature T[0]/cjt is: %6.3f [%.9f]\n", cjt, t ));
   mode = pi.spi_mode( pi.spi1_0.fd )
   io.write( "SPI mode is: ", tostring( mode ), "\n" )
--[[
   for i = 1, cnt do
      pi.spi_message( pi.spi1_0, { tx_buf = "\16\10", delay_usecs = 10 }, { len = 11 } )
   end
]]--
   local all = { pi.spi_message( pi.spi1_0.fd, { tx_buf = "\16\10", delay_usecs = 10 }, { len = 11 } ) }
   for i,m in ipairs(all) do
      for k,v in pairs(m) do
         io.write( "[",i,"]",k," = " )
         if k == "tx_buf" or k == "rx_buf" then
            io.write( string.format( "%02x", v:byte(1) ) )
            for j = 2, #v do
               io.write( string.format( ":%02x", v:byte(j) ) )
            end
            io.write( "\n" )
         else
            io.write( tostring(v), "\n" )
         end
      end
   end

   print( "Read and convert PTS on channel w/globals" );
   local start
   start = pi.gettime( )
   for i = 1, 10 do
      local t = pi.ads1256_getraw(pi.spi1_0.fd, 1/16)
      io.write( string.format( "Temperature T[0] is: %6.3f [%.9f]\n", pi.rt2temp_PTS(t,27), t ))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, pi.gettime(start) ))

   local cjtv = pi.temp2volt_K(cjt)

   print( "Read and convert K-type after select channel w/globals" );
   start = pi.gettime( )
   pi.ads1256_setmux(pi.spi1_0.fd, 0x01)
   for i = 1, 10 do
      t = pi.ads1256_getraw(pi.spi1_0.fd, 2.048/16)
      io.write( string.format( "Temperature T[1] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, pi.gettime(start) ))

--[[
   pi.ads1256_setmux(pi.spi1_0.fd, 0x23)
   for i = 1, 10 do
      t = pi.ads1256_getraw(pi.spi1_0.fd, 2.048/16)
      io.write( string.format( "Temperature T[2] is: %6.3f [%.9f]\n", pi.volt2temp_K(t+pi.temp2volt_K(cjt)),t ))
   end
]]--

   print( "Read and convert K-type, alternating select channel w/globals" );
   start = pi.gettime( )
   for i = 1, 5 do
      pi.ads1256_setmux(pi.spi1_0.fd, 0x45)
      t = pi.ads1256_getraw(pi.spi1_0.fd, 2.048/16)
      io.write( string.format( "Temperature T[3] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
      pi.ads1256_setmux(pi.spi1_0.fd, 0x01)
      t = pi.ads1256_getraw(pi.spi1_0.fd, 2.048/16)
      io.write( string.format( "Temperature T[1] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, pi.gettime(start) ))

   print( "Read and convert K-type, alternating using getraw_setmux w/globals" );
   start = pi.gettime( )
   pi.ads1256_setmux(pi.spi1_0.fd, 0x45)
   for i = 1, 5 do
      t = pi.ads1256_getraw_setmux(pi.spi1_0.fd, 2.048/16, 0x01)
      io.write( string.format( "Temperature T[3] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
      t = pi.ads1256_getraw_setmux(pi.spi1_0.fd, 2.048/16, 0x45)
      io.write( string.format( "Temperature T[1] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, pi.gettime(start) ))

   print( "Read only K-type, alternating using getraw_setmux w/local" );
   start = pi.gettime( )
   local vals = { }
   local gs = pi.ads1256_getraw_setmux
   local ti = table.insert
   local s10fd = pi.spi1_0.fd
   pi.ads1256_setmux(s10fd, 0x45)
   for i = 1, 5 do
      ti( vals, gs(s10fd, 0.128, 0x01))
      ti( vals, gs(s10fd, 0.128, 0x45))
   end
   local runtime = pi.gettime(start)
   for k, v in ipairs(vals) do
      io.write(string.format("t=%.9f  %6.3f degC\n", v, pi.volt2temp_K(v+cjtv)))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, runtime ))

   print( "Read only K-type, alternating using getraw_setmuxC w/local" );
   start = pi.gettime( )
   local vals = { }
   local gsC = pi.ads1256_getraw_setmuxC
   local ti = table.insert
   local s10fd = pi.spi1_0.fd
   pi.ads1256_setmux(pi.spi1_0.fd, 0x45)
   for i = 1, 5 do
      t = pi.ads1256_getraw_setmuxC(pi.spi1_0.fd, 2.048/16, 0x01)
      table.insert( vals, t )
--      ti( vals, gsC(s10fd, 2.048/16, 0x01))
--      io.write( string.format( "Temperature T[3] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
      t = pi.ads1256_getraw_setmuxC(pi.spi1_0.fd, 2.048/16, 0x45)
      table.insert( vals, t )
--      ti( vals, gsC(s10fd, 2.048/16, 0x45))
--      io.write( string.format( "Temperature T[1] is: [%.9f] %6.3f\n", t, pi.volt2temp_K(t+cjtv) ))
   end
   runtime = pi.gettime(start)
   for k, v in ipairs(vals) do
      io.write(string.format("t=%.9f  %6.3f degC\n", v, pi.volt2temp_K(v+cjtv)))
   end
   io.write( string.format( "Started: %.6f sec, took %.6f sec\n", start, runtime ))

end

-- ex: set sw=3 sta et : --
